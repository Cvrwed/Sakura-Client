package cc.unknown.module.impl.exploit.disablers;

import cc.unknown.event.Listener;
import cc.unknown.event.annotations.EventLink;
import cc.unknown.event.impl.motion.MotionEvent;
import cc.unknown.event.impl.other.WorldChangeEvent;
import cc.unknown.event.impl.packet.PacketEvent;
import cc.unknown.module.impl.exploit.Disabler;
import cc.unknown.util.chat.ChatUtil;
import cc.unknown.util.packet.PacketUtil;
import cc.unknown.value.Mode;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.network.play.client.C03PacketPlayer;

public class BoatDisabler extends Mode<Disabler> {

	public BoatDisabler(String name, Disabler parent) {
		super(name, parent);
	}
	
	private boolean verus = false;
	
	@Override
	public void onEnable() {
    	if (getParent().boat.getValue()) {
    		verus = false;
    	}
	}
	
	@EventLink
	public final Listener<PacketEvent> onPacket = event -> {
        if (getParent().boat.getValue()) {

            if (mc.player != null && mc.player.ridingEntity != null) {
            	verus = true;
            }

            if (verus) {
                if (event.getPacket() instanceof C03PacketPlayer) {
                	C03PacketPlayer wrapper = ((C03PacketPlayer) event.getPacket());
                	wrapper.onGround = false;
                }
            }
        }
	};
	
	@EventLink
	public final Listener<MotionEvent> onPreMotion = event -> {
        if (getParent().boat.getValue()) {
            if (mc.player.ridingEntity != null) {
                mc.player.swingItem();
                mc.playerController.attackEntity(mc.player, mc.player.ridingEntity);
                PacketUtil.send(new C03PacketPlayer(false));
                mc.player.swingItem();
                mc.playerController.attackEntity(mc.player, getNearestBoat());
                ChatUtil.display("Destroying Boat");
            }
        }
	};
	
    @EventLink
    public final Listener<WorldChangeEvent> onWorld = event -> {
    	if (getParent().boat.getValue()) {
    		verus = false;
    	}
    };
	
	private EntityBoat getNearestBoat() {
	    double distance = Double.MAX_VALUE;
	    EntityBoat nearestBoat = null;

	    for (Entity entity : mc.world.loadedEntityList) {
	        if (entity instanceof EntityBoat && entity != mc.player.ridingEntity) {
	            double d = getDistanceToEntity(mc.player, entity);

	            if (d < distance) {
	                nearestBoat = (EntityBoat) entity;
	                distance = d;
	            }
	        }
	    }

	    return nearestBoat;
	}
	
	private double getDistanceToEntity(Entity entity1, Entity entity2) {
	    double xDiff = entity1.posX - entity2.posX;
	    double yDiff = entity1.posY - entity2.posY;
	    double zDiff = entity1.posZ - entity2.posZ;
	    return Math.sqrt(xDiff * xDiff + yDiff * yDiff + zDiff * zDiff);
	}
}
